{"version":3,"sources":["components/Header/index.js","components/WelcomeModal/style.js","components/WelcomeModal/index.js","components/Dashboard/style.js","components/Dashboard/index.js","components/App/style.js","components/App/index.js","serviceWorker.js","index.js"],"names":["Header","root","scale","className","Modal","styled","div","ModalContent","Inpt","input","WelcomeModal","closeModal","setNumberOfStrings","setNumberOfFrets","numberOfStrings","numberOfFrets","onSubmit","e","preventDefault","placeholder","type","onChange","target","value","DashSetting","GuitarString","Dashboard","setScale","setRoot","notes","fretboard","openNotes","setOpenNotes","scaleNotes","disabled","selected","map","note","index","key","elem","i","newArr","slice","FretNote","FretContainer","App","useState","showModal","setShowModal","setFretboard","setScaleNotes","fretNumbers","Array","fill","useEffect","makeMajor","arr","indexOf","concat","length","pop","filter","makeMinor","strings","frets","fretArray","openNote","guitarString","push","buildFretboard","n","ind","includes","element","num","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0NAiBeA,EAbA,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MACnB,OACI,6BACI,wBAAIC,UAAU,mCAAd,kBAGA,wBAAIA,UAAU,oBACTF,EADL,MACcC,K,irBCRnB,IAAME,EAAQC,IAAOC,IAAV,KAaLC,EAAeF,IAAOC,IAAV,KAeZE,EAAOH,IAAOI,MAAV,KCRFC,EAnBM,SAAC,GAA2F,IAAzFC,EAAwF,EAAxFA,WAAYC,EAA4E,EAA5EA,mBAAoBC,EAAwD,EAAxDA,iBAAkBC,EAAsC,EAAtCA,gBAAiBC,EAAqB,EAArBA,cAKvF,OACI,kBAACX,EAAD,KACI,kBAACG,EAAD,KACI,iHACA,0BAAMS,SARE,SAACC,GACjBA,EAAEC,iBACFP,MAOY,kBAACH,EAAD,CAAMW,YAAaL,EAAiBM,KAAK,SAASC,SAAU,SAAAJ,GAAC,OAAIL,EAAmBK,EAAEK,OAAOC,UAC7F,kBAACf,EAAD,CAAMW,YAAaJ,EAAeK,KAAK,SAAQC,SAAU,SAAAJ,GAAC,OAAIJ,EAAiBI,EAAEK,OAAOC,UACxF,4BAAQH,KAAK,UAAb,c,isBCbIf,IAAOC,IAAV,KAWQD,IAAOC,IAAV,KAXnB,IAoBMkB,EAAcnB,IAAOC,IAAV,KAKXmB,EAAepB,IAAOC,IAAV,KC8BVoB,EArDG,SAAC,GAAuF,IAAtFC,EAAqF,EAArFA,SAAUC,EAA2E,EAA3EA,QAASC,EAAkE,EAAlEA,MAAOC,EAA2D,EAA3DA,UAAWC,EAAgD,EAAhDA,UAAWC,EAAqC,EAArCA,aAAqC,EAAvBC,WAAuB,EAAXhC,KAC1F,OACI,yBAAKE,UAAU,aACX,wBAAIA,UAAU,qBAAd,aACI,kBAACqB,EAAD,aAEI,4BAAQH,SAAU,SAACJ,GAAD,OAAOW,EAAQX,EAAEK,OAAOC,SACtC,4BAAQW,UAAQ,EAACC,UAAQ,GAAzB,mBAEIN,EAAMO,KAAI,SAACC,EAAMC,GAAP,OACN,4BAAQC,IAAKD,GAAQD,QAKrC,kBAACb,EAAD,cAEI,4BAAQH,SAAU,SAACJ,GAAD,OAAOU,EAASV,EAAEK,OAAOC,SACvC,4BAAQW,UAAQ,EAACC,UAAQ,GAAzB,oBACA,yCACA,yCACA,oDACA,sDAOPL,EAAUM,KAAI,SAACI,EAAKC,GAAN,OACX,kBAAChB,EAAD,CAAcc,IAAKE,GACf,+CAAiBA,EAAI,IACrB,4BAAQpB,SACJ,SAAAJ,GAEI,IAAIyB,EAASX,EAAUY,QACvBD,EAAOD,GAAKxB,EAAEK,OAAOC,MACrBS,EAAaU,KAGjB,4BAAQR,UAAQ,EAACC,UAAQ,GAAzB,qBAEIN,EAAMO,KAAI,SAACC,EAAMC,GAAP,OACN,4BAAQC,IAAKD,GAAQD,a,ykBC7ClD,IAAMO,EAAWvC,IAAOC,IAAV,KAWRuC,EAAgBxC,IAAOC,IAAV,KASbmB,EAAepB,IAAOC,IAAV,KCZnBuB,EAAQ,CAAC,IAAK,KAAM,IAAK,IAAK,KAAM,IAAK,KAAM,IAAK,IAAK,KAAM,IAAK,MAqH3DiB,EAlHH,WAAQ,IAAD,EACmBC,oBAAS,GAD5B,mBACRC,EADQ,KACGC,EADH,OAE+BF,mBAAS,GAFxC,mBAERjC,EAFQ,KAESF,EAFT,OAG2BmC,mBAAS,IAHpC,mBAGRhC,EAHQ,KAGOF,EAHP,OAImBkC,mBAAS,IAJ5B,mBAIRjB,EAJQ,KAIGoB,EAJH,OAKmBH,mBAAS,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,MALtD,mBAKRhB,EALQ,KAKGC,EALH,OAMSe,mBAAS,KANlB,mBAMR9C,EANQ,KAMF2B,EANE,OAOWmB,mBAAS,SAPpB,mBAOR7C,EAPQ,KAODyB,EAPC,OAQqBoB,mBAAS,IAR9B,mBAQRd,EARQ,KAQIkB,EARJ,KAaTC,EAAc,IAAIC,MAAMtC,GAAeuC,KAAK,KAoDlD,OAnDAC,qBAAU,WACN,IAAMC,EAAY,SAACC,GAEf,IADA,IAAIf,EAASe,EAAId,MAAMc,EAAIC,QAAQzD,IAAO0D,OAAOF,GAC1Cf,EAAOkB,OAASH,EAAIG,QAC3BlB,EAAOmB,MAGHV,EADU,qBAAVjD,EACcwC,EAAOoB,QAAO,SAACtB,EAAMF,GAAW,OAAiB,IAAVA,GAAyB,IAAVA,GAAyB,IAAVA,GAAyB,IAAVA,GAAyB,IAAVA,KAGnGI,EAAOoB,QAAO,SAACtB,EAAMF,GAAW,OAAiB,IAAVA,GAAyB,IAAVA,GAAyB,IAAVA,GAAyB,IAAVA,GAAyB,IAAVA,GAAyB,IAAVA,GAAwB,KAATA,OAGjJyB,EAAY,SAACN,GAEf,IADA,IAAIf,EAASe,EAAId,MAAMc,EAAIC,QAAQzD,IAAO0D,OAAOF,GAC1Cf,EAAOkB,OAASH,EAAIG,QAC3BlB,EAAOmB,MAGHV,EADU,qBAAVjD,EACcwC,EAAOoB,QAAO,SAACtB,EAAMF,GAAW,OAAiB,IAAVA,GAAyB,IAAVA,GAAyB,IAAVA,GAAyB,IAAVA,GAAwB,KAATA,KAGvGI,EAAOoB,QAAO,SAACtB,EAAMF,GAAW,OAAiB,IAAVA,GAAyB,IAAVA,GAAyB,IAAVA,GAAyB,IAAVA,GAAyB,IAAVA,GAAyB,IAAVA,GAAwB,KAATA,OAerI,UAAVpC,GACAsD,EAAU3B,GAEA,UAAV3B,GACA6D,EAAUlC,GAEA,qBAAV3B,GACAsD,EAAU3B,GAEA,qBAAV3B,GACA6D,EAAUlC,GAtBS,SAACmC,EAASC,GAE7B,IADA,IAAIC,EAAY,GACRzB,EAAI,EAAGA,EAAIuB,EAASvB,IAAK,CAG7B,IAFA,IAAI0B,EAAWpC,EAAUU,GACrB2B,EAAevC,EAAMc,MAAMd,EAAM6B,QAAQS,IAAWR,OAAO9B,EAAOA,GAC/DuC,EAAaR,OAASK,GACzBG,EAAaP,MAEjBK,EAAUG,KAAKD,GAEnBlB,EAAagB,GAcjBI,CAAexD,EAAiBC,KACjC,CAACA,EAAeD,EAAiBiB,EAAW9B,EAAMC,IAEjD,6BACI,kBAAC,EAAD,CAAQD,KAAMA,EAAMC,MAAOA,IAItB4B,EAAUM,KAAI,SAACI,EAAKC,GAAN,OACX,kBAAC,EAAD,CAAcF,IAAKE,GACdD,EAAKJ,KAAI,SAACmC,EAAGC,GAAJ,OACN,kBAAC,EAAD,CAAejC,IAAKiC,GAChB,kBAAC,EAAD,CAAUjC,IAAKiC,EAAKrE,UAAY8B,EAAWwC,SAASF,GAArB,gBAAoCA,IAAMtE,EAAO,OAAS,MAASsE,GAC7FA,WAMzB,yBAAKpE,UAAU,yBAEPiD,EAAYhB,KAAI,SAACsC,EAASC,GAAV,OAAkB,yBAAKxE,UAAU,cAAcoC,IAAKoC,GAAMA,OAGlF,4BAAQC,QAAS,kBAAMhE,EAAmBE,EAAkB,KAA5D,cACA,4BAAQ8D,QAAS,kBAAMhE,EAAmBE,EAAkB,KAA5D,iBACA,kBAAC,EAAD,CACIa,SAAUA,EACVC,QAASA,EACTC,MAAOA,EACPC,UAAWA,EACXC,UAAWA,EACXC,aAAcA,EACdC,WAAYA,EACZhC,KAAMA,IAGN+C,EAAY,kBAAC,EAAD,CACIrC,WA3FT,WACfsC,GAAa,IA2FWpC,iBAAkBA,EAClBD,mBAAoBA,EACpBG,cAAgBA,EAChBD,gBAAiBA,IAGrB,OC9GR+D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.081a9e3e.chunk.js","sourcesContent":["import React from 'react';\n\n\n\nconst Header = ({root, scale}) =>  {\n    return(\n        <div>\n            <h1 className=\"margin-top-small primary-header\">\n                The Guit Guide\n            </h1>\n            <h2 className=\"margin-top-small\">\n                {root} - {scale}\n            </h2>\n        </div>\n    )\n}\n\nexport default Header;","import styled from 'styled-components';\n\n\nexport const Modal = styled.div`\n    display: block;\n    position: fixed;\n    z-index: 1;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    overflow: auto;\n    background-color: rgb(0,0,0);\n    background-color: rgba(0,0,0,0.4);\n`\n\nexport const ModalContent = styled.div`\n    text-align: center;\n    display: flex;\n    align-items: center;\n    flex-direction: column;\n    background-color: #fefefe;\n    margin: 15% auto;\n    padding: 20px;\n    border: 1px solid #888;\n    width: 80%;\n`\n\n\n\n\nexport const Inpt = styled.input`\n    display: block;\n`\n\n","import React from 'react';\n\nimport { Inpt, Modal, ModalContent } from './style'\n\nconst WelcomeModal = ({ closeModal, setNumberOfStrings, setNumberOfFrets, numberOfStrings, numberOfFrets }) =>  {\n    const handleClick = (e) =>  {\n        e.preventDefault();\n        closeModal();\n    }\n    return(\n        <Modal>\n            <ModalContent>\n                <h2>Hi, Welcome to the Guit Guide. Fill in some Info about your guitar to get started</h2>\n                <form onSubmit={handleClick}>\n                    <Inpt placeholder={numberOfStrings} type='number' onChange={e => setNumberOfStrings(e.target.value)}/>\n                    <Inpt placeholder={numberOfFrets} type='number'onChange={e => setNumberOfFrets(e.target.value)}/>\n                    <button type='submit'>Submit</button>\n                </form>\n            </ModalContent>\n        </Modal>\n    )\n}\n\nexport default WelcomeModal;","import styled from 'styled-components';\n\n\nexport const FretNote = styled.div`\n    display: inline;\n    padding: 5px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    height: 27px;\n    width: 27px;\n\n`\nexport const FretContainer = styled.div`\n    width: 5%;\n    height: 35px;\n    padding: 7px;\n    border: 1px solid black;\n    text-align: center;\n    position: relative;\n`\n\nexport const DashSetting = styled.div`\n    display: flex;\n    justify-content: space-around;\n`\n\nexport const GuitarString = styled.div`\n    display: flex;\n    justify-content: space-around;\n`","import React from 'react';\nimport {GuitarString, DashSetting} from './style';\n\n\n\nconst Dashboard = ({setScale, setRoot, notes, fretboard, openNotes, setOpenNotes, scaleNotes, root}) =>  {\n    return(\n        <div className=\"dashboard\">\n            <h3 className=\"dashboard__header\">Dashboard</h3>\n                <DashSetting>\n                    ROOT:\n                    <select onChange={(e) => setRoot(e.target.value)}>\n                        <option disabled selected>- Change Root -</option>\n                        {\n                            notes.map((note, index) =>  \n                                <option key={index}>{note}</option>\n                            )\n                        }\n                    </select>\n                </DashSetting>\n                <DashSetting>\n                    SCALE:\n                    <select onChange={(e) => setScale(e.target.value)}>\n                        <option disabled selected>- Change Scale -</option>\n                        <option>Major</option>\n                        <option>Minor</option>\n                        <option>Major Pentatonic</option>\n                        <option>Minor Pentatonic</option>\n                    </select>\n\n                </DashSetting>\n           \n            {\n                //these are the tuners for lack of a better word\n                 fretboard.map((elem,i) => \n                    <GuitarString key={i}>\n                        <span>{`String ${i + 1}`}</span>\n                        <select onChange={\n                            e => \n                            {\n                                let newArr = openNotes.slice();\n                                newArr[i] = e.target.value;\n                                setOpenNotes(newArr);\n                            }\n                            }>\n                            <option disabled selected>- Change Tuning -</option>\n                            {\n                                notes.map((note, index) =>  \n                                    <option key={index}>{note}</option>\n                                )\n                            }\n                        </select>\n                    </GuitarString>)\n            }\n        </div>\n    )\n}\n\nexport default Dashboard;","import styled from 'styled-components';\n\n\nexport const FretNote = styled.div`\n    display: inline;\n    padding: 5px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    height: 27px;\n    width: 27px;\n\n`\nexport const FretContainer = styled.div`\n    width: 5%;\n    height: 35px;\n    padding: 7px;\n    border: 1px solid var(--color-white);\n    text-align: center;\n    position: relative;\n`\n\nexport const GuitarString = styled.div`\n    display: flex;\n    justify-content: center;\n`","import React, { useState, useEffect } from 'react';\n\n\nimport Header from '../Header';\nimport WelcomeModal from '../WelcomeModal';\nimport Dashboard from '../Dashboard';\n\n\nimport { FretNote, GuitarString, FretContainer } from './style';\n\n\nconst notes = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#'];\n// const openNotes = ['E', 'A', 'D', 'G', 'B', 'E'];\n\nconst App = () =>  {\n    const [showModal, setShowModal] = useState(false);\n    const [numberOfStrings, setNumberOfStrings] = useState(6);\n    const [numberOfFrets, setNumberOfFrets] = useState(24);\n    const [fretboard, setFretboard] = useState([]);\n    const [openNotes, setOpenNotes] = useState(['E', 'B', 'G', 'D', 'A', 'E']);\n    const [root, setRoot] = useState('C');\n    const [scale, setScale] = useState('Major');\n    const [scaleNotes, setScaleNotes] = useState([]);\n    //using this to close welcome model when people submit the form\n    const closeModal = () =>  {\n        setShowModal(false);\n    }\n    const fretNumbers = new Array(numberOfFrets).fill('x');\n    useEffect(() =>  {\n        const makeMajor = (arr) =>  {\n            let newArr = arr.slice(arr.indexOf(root)).concat(arr);\n            while (newArr.length > arr.length) {\n            newArr.pop();\n            }\n            if (scale === 'Major Pentatonic'){\n                setScaleNotes(newArr.filter((elem, index) => {return index === 0 || index === 2 || index === 4 || index === 7 || index === 9}))  \n            }\n            else {\n                setScaleNotes(newArr.filter((elem, index) => {return index === 0 || index === 2 || index === 4 || index === 5 || index === 7 || index === 9 || index ===11}))  \n            };\n        }\n        const makeMinor = (arr) =>  {\n            let newArr = arr.slice(arr.indexOf(root)).concat(arr);\n            while (newArr.length > arr.length) {\n            newArr.pop();\n            }\n            if (scale === 'Minor Pentatonic'){\n                setScaleNotes(newArr.filter((elem, index) => {return index === 0 || index === 3 || index === 5 || index === 7 || index ===10}))  \n            }\n            else {\n            setScaleNotes(newArr.filter((elem, index) => {return index === 0 || index === 2 || index === 3 || index === 5 || index === 7 || index === 8 || index ===10}))};\n        }\n        //using this to build arrays or strings and frets to contain names of notes\n        const buildFretboard = (strings, frets) =>  {\n            let fretArray = [];\n            for(let i = 0; i < strings; i++) {\n                let openNote = openNotes[i];\n                let guitarString = notes.slice(notes.indexOf(openNote)).concat(notes, notes);\n                while (guitarString.length > frets) {\n                    guitarString.pop();\n                }\n                fretArray.push(guitarString);\n            }\n            setFretboard(fretArray);\n        }\n        if (scale === 'Major') {\n            makeMajor(notes);\n        }\n        if (scale === 'Minor') {\n            makeMinor(notes);\n        }\n        if (scale === 'Major Pentatonic') {\n            makeMajor(notes);\n        }\n        if (scale === 'Minor Pentatonic') {\n            makeMinor(notes);\n        }\n        buildFretboard(numberOfStrings, numberOfFrets);\n    }, [numberOfFrets, numberOfStrings, openNotes, root, scale]);\n    return(\n        <div>\n            <Header root={root} scale={scale} />\n            \n            {\n                //these are the tuners for lack of a better word\n                 fretboard.map((elem,i) => \n                    <GuitarString key={i}>\n                        {elem.map((n, ind) => \n                            <FretContainer key={ind}>\n                                <FretNote key={ind} className={(scaleNotes.includes(n)) ? `scale ${n === root ? 'root' : null}` : n}>\n                                    {n}\n                                </FretNote>\n                            </FretContainer>\n                        )}\n                    </GuitarString>)\n            }\n            <div className=\"fret-inlays-container\">\n                {\n                    fretNumbers.map((element, num) => <div className=\"fret-inlays\" key={num}>{num}</div>)\n                }\n            </div>\n            <button onClick={() => setNumberOfStrings(numberOfStrings + 1)}>Add String</button>\n            <button onClick={() => setNumberOfStrings(numberOfStrings - 1)}>Delete String</button>\n            <Dashboard \n                setScale={setScale} \n                setRoot={setRoot} \n                notes={notes} \n                fretboard={fretboard}\n                openNotes={openNotes}\n                setOpenNotes={setOpenNotes}\n                scaleNotes={scaleNotes}\n                root={root}\n            />\n            {\n                showModal ? <WelcomeModal \n                                closeModal ={closeModal} \n                                setNumberOfFrets={setNumberOfFrets} \n                                setNumberOfStrings={setNumberOfStrings} \n                                numberOfFrets ={numberOfFrets} \n                                numberOfStrings={numberOfStrings}\n                                /> \n                            : \n                            null\n            }\n        </div>\n    )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}